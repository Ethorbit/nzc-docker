include .env 
SHELL := /bin/bash 
compose_dir := ./compose
data_dir := $(compose_dir)/data
build_dir := $(compose_dir)/build

# Used to add newlines into other defines
define newline 


endef

bs := $(strip \) # Used to add literal newlines into other defines

# We need to save the disk that named docker volumes get created on,
# this is so that the compose file can set IO limits for containers
ifndef DISK
	VOLUME_DIR := $(shell docker info | grep "Docker Root" | cut -d ":" -f2 | cut -c2-)
	VOLUME_DIR := $(shell test ! -d "$(VOLUME_DIR)" && echo "/var/lib/docker" || echo "$(VOLUME_DIR)")
	DISK := $(shell df "$(VOLUME_DIR)" | tail -1 | cut -d " " -f 1)
endif

ifndef GMOD_COUNT
	GMOD_COUNT := 1
	build_warnings := $(build_warnings)$(newline)Using default GMOD_COUNT ($(GMOD_COUNT))
endif 

ifndef GMOD_START_PORT
	GMOD_START_PORT := 27015
	build_warnings := $(build_warnings)$(newline)Using default GMOD_START_PORT ($(GMOD_START_PORT))
endif

# Some stuff we want to do with docker-compose can only be done programatically
# We'll combine the .build.yaml (static) files with the necessary programatic strings here.
define gmod_seq
	$(shell seq ${GMOD_COUNT})
endef

define gmod_yaml
$(file < $(compose_dir)/gmod_servers.build.yml)
# Below is all generated by Makefile
services: $(foreach i,$(gmod_seq), \
$(eval cpuset := $(shell test ! -z GMOD_$(i)_CPU && echo cpuset: \"$(GMOD_$(i)_CPU)\")) \
$(eval cpupercent := $(shell test ! -z GMOD_$(i)_CPUMAX && echo cpu_percent: $(GMOD_$(i)_CPUMAX))) \
$(eval start_port := $(shell echo "$(GMOD_START_PORT) - 1" | bc)) \
$(eval port := $(shell echo "$(start_port) + $(i)" | bc)) \
$(newline)  unionfs-$i:
    <<: *unionfs
    $(cpuset)
    volumes:
      - ./data/users/passwd:/etc/passwd:ro
      - ./data/users/group:/etc/group:ro
      - ./data/users/shadow:/etc/shadow:ro
      - gmod_shared:/bottom:shared
      - gmod_$i:/top:shared
      - gmod_$i_merged:/merged:shared
  gmod-$i:
    <<: *gmod
    $(cpuset)
    $(cpupercent)
    cpu_shares: $${GMOD_$(i)_CPUSHARE:-1024}
    environment:
      <<: *gmod-environment
      SRCDS_RUN_ARGS: "-tickrate 33 -disableluarefresh -port $(port) +maxplayers 15 +gamemode sandbox +map gm_flatgrass"
    volumes:
      - ./data/users/passwd:/etc/passwd:ro
      - ./data/users/group:/etc/group:ro
      - ./data/users/shadow:/etc/shadow:ro
      - gmod_$i:/home/srcds/server
    ports:
      - $(port):$(port)/udp
    depends_on:
      users_and_groups:
        condition: service_completed_successfully
      unionfs-$i:
        condition: service_started 
    healthcheck:
      test: ["CMD-SHELL", "findmnt ${VOLUME_DIR} | grep gmod_$i_merged | grep unionfs"])
volumes:
  gmod_shared:  $(foreach i,$(gmod_seq), \
    $(newline)  gmod_$i: \
    $(newline)  gmod_$i_merged: \
)
endef

# We're also going to generate the server dockerfiles, as they are all mostly identical 
# (This isn't necessary, but complies with the DRY rule)
define srcds_base_dockerfile
ARG PUID
ARG PGID
ARG TZ
ENV TZ=$${TZ}
USER root
RUN usermod -u "$$PUID" srcds &&$(bs)
   groupmod -g "$$PGID" srcds &&$(bs)
   chown srcds:srcds -R /home/srcds &&$(bs)
   ln -snf "/usr/share/zoneinfo/$$TZ" /etc/localtime &&$(bs)
   echo "/usr/share/zoneinfo/$$TZ" > /etc/timezone &&$(bs)
   dpkg-reconfigure -f noninteractive tzdata
USER srcds
endef

define srcds_dockerfile
FROM ethorbit/srcds-server:latest
$(srcds_base_dockerfile)
endef

define svencoop_dockerfile
FROM ethorbit/svencoop-server:latest
$(srcds_base_dockerfile)
endef

list_yml_command := ls $(compose_dir)/*.yml | grep -Ev '(\.build\.yml)' | sed "s/^/-f /"

define yml_files
$(shell [[ "$(nofiles)" -ne 1 ]] && $(list_yml_command))
endef

define yml_files_build
$(shell $(list_yml_command))
endef

profile := $(shell [[ "$(DEVELOPING)" -ge 1 ]] && echo "development" || echo "production")
command_base := nofiles=$(nofiles) \
				DISK=$(DISK) HUID=$(shell id -u) HGID=$(shell id -g) \
				docker-compose --env-file .env --profile $(profile) -p nzc

command_build := $(command_base) --profile setup_users $(yml_files_build) build
command_setup_users := $(command_base) --profile setup_users -f $(compose_dir)/users_and_groups.yml up
command := $(command_base) $(yml_files) --env-file $(data_dir)/users/env

build_templates: #$(compose_dir)/gmod_servers.build.yml
	$(file > $(compose_dir)/gmod_servers.yml,$(gmod_yaml))
	$(file > $(build_dir)/srcds-server/Dockerfile,$(srcds_dockerfile))
	$(file > $(build_dir)/svencoop-server/Dockerfile,$(svencoop_dockerfile))
	$(info $(build_warnings))

build_docker: $(dir $(wildcard $(build_dir)/**/*))
	$(command_build)
	touch $@

# The containers' users and groups are managed by a service and isolated from the host
# because it generates a dependency .env file that other containers use to specify users and groups, 
# we will run this separately
setup_users: $(compose_dir)/users_and_groups.yml 
	$(info We must configure users and groups first) # on the HOST first, this requires root.)
	$(command_setup_users)
	touch $@

args := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))

.PHONY: cmd help
cmd: setup_users build_templates build_docker
	$(command) $(args)

define help_text
	make build
	make cmd "compose arguments here" - also calls build
		Examples:
			make cmd "up"
			nofiles=1 make cmd -- "-f ./compose/nginx.yml down"
endef

help:
	$(info $(help_text))
