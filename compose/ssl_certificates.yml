version: "3.9"
x-labels: &labels
  labels:
    - "io.portainer.accesscontrol.teams=websites"

x-healthcheck: &healthcheck
  healthcheck:
    test: /bin/sh -c '/healthcheck.sh || exit 1' 
    interval: 15s
    timeout: 8s
    retries: 2
    start_period: 15s

services:
  # I don't think it's even possible to healthcheck this like we do with the pub and priv keys..
  # healthcheck command: openssl dhparam -check < /mnt/dhparam.dh 
  dhparam:
    image: ethorbit/openssl:latest
    volumes:
      - dhparam:/mnt
    command: >
      /bin/sh -c "[[ ! -s /mnt/dhparam.dh ]] 
      && openssl dhparam -out /mnt/dhparam.dh 2048 
      || chown '${cert_u}':'${websites_g}' /mnt/dhparam.dh && exit 0"
    <<: [ *labels ]
    network_mode: none
    restart: on-failure
  
  # Certificate for Development
  mkcert:
    build:
      context: ./build/mkcert
      args:
        - UID=${cert_u}
        - GID=${websites_g}
    profiles:
      - development
    volumes:
      - ${CA_TRUST_STORE_DIR:-/usr/local/share/ca-certificates}:/usr/local/share/ca-certificates
      - mkcert:/mnt
    environment:
      - PRIVATE_DOMAIN_NAME=${PRIVATE_DOMAIN_NAME}
      - PUBLIC_KEY=/mnt/mkcert.pem
      - PRIVATE_KEY=/mnt/mkcert.key
    <<: [ *healthcheck ]
    network_mode: none 
    restart: on-failure
    
  # Certificate for Production w/ renewal
  acme_dns_envsubst:
    build:
      context: ./build/acme_dns_input_output_envsubst
      args:
        FILE_EXTENSION: "cfg"
    profiles:
      - production
    environment:
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - PUBLIC_DOMAIN_NAME=${PUBLIC_DOMAIN_NAME}
      - PUBLIC_IP=${PUBLIC_IP}
    volumes:
      - ./data/configs/acme_dns/template:/mnt/input
      - ./data/configs/acme_dns:/mnt/output
    network_mode: none
    <<: [*labels]
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
      - FOWNER
    restart: on-failure
  acme_dns:
    build:
      context: ./build/acme_dns
    profiles:
      - production
    networks:
      - acme_dns
    hostname: acme_dns
    <<: [*labels]
    volumes:
      - ./data/configs/acme_dns:/etc/acme-dns:ro
      - acme_dns_storage:/var/lib/acme-dns
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 127.0.0.1::80/tcp
    depends_on:
      acme_dns_envsubst:
        condition: service_completed_successfully
      rsyslog:
        condition: service_healthy
    logging:
      driver: syslog
      options:
        mode: non-blocking
        syslog-address: "tcp://localhost:${RSYSLOG_PORT}"
        tag: "acme_dns"
    healthcheck:
      test: 'curl -f -X GET http://acme_dns/health || exit 1'
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always
  certbot_permissions:
    build:
      context: ./build/permissions
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: >
      /bin/sh -c 'chown -fR "${cert_u}":"${websites_g}" /etc/letsencrypt/
      && chown -fR "${cert_u}":"${websites_g}" /var/www/certbot/'
    cap_drop:
      - ALL
    cap_add:
      - CAP_DAC_OVERRIDE
      - CAP_CHOWN
      - CAP_FOWNER
      - CAP_FSETID
    network_mode: none
    restart: on-failure
  certbot:
    build:
      context: ./build/certbot
      args:
        - UID=${cert_u}
        - GID=${websites_g}
        - ACMEDNS_URL="http://acme_dns"
    profiles:
      - production
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    networks:
      - acme_dns
    <<: [ *healthcheck, *labels ]
    environment:
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - PUBLIC_KEY=/etc/letsencrypt/live/${PUBLIC_DOMAIN_NAME}/cert.pem
      - PRIVATE_KEY=/etc/letsencrypt/live/${PUBLIC_DOMAIN_NAME}/privkey.pem
    # We need to use the DNS-01 method for wildcard domains. Not optional.
    command: >
      certonly
      ${CERTBOT_TEST_FLAG}
      --non-interactive 
      --manual 
      --agree-tos 
      --keep-until-expiring 
      --email "${ADMIN_EMAIL}" 
      --rsa-key-size 4096 
      --preferred-challenges dns 
      --manual-auth-hook /etc/letsencrypt/acme-dns-auth.py 
      --debug-challenges 
      --verbose 
      -d "${PUBLIC_DOMAIN_NAME},*.${PUBLIC_DOMAIN_NAME}"
    depends_on:
      certbot_permissions:
        condition: service_completed_successfully
      acme_dns:
        condition: service_healthy
      rsyslog:
        condition: service_healthy
    logging:
      driver: syslog
      options:
        mode: non-blocking
        syslog-address: "tcp://localhost:${RSYSLOG_PORT}"
        tag: "certbot"
    restart: always

volumes:
  dhparam:
  acme_dns_storage:
  mkcert:
  certbot_conf:
  certbot_www:
networks:
  acme_dns:
